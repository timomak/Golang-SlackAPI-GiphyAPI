// DO NOT EDIT THIS FILE. This is a fully complete implementation.
package main

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo"
	"gopkg.in/go-playground/webhooks.v5/github"

	// "github.com/droxey/goslackit/slack"
	_ "github.com/joho/godotenv/autoload"
)

// Trying again
// main is our entrypoint, where the application initializes the Slackbot.
func main() {
	// port := ":" + os.Getenv("PORT")
	// go http.ListenAndServe(port, nil)
	hook, _ := github.New(github.Options.Secret("Wassup"))

	e := echo.New()
	e.POST("/test", func(c echo.Context) error {
		payload, err := hook.Parse(c.Request(), github.PushEvent)
		if err != nil {
			if err == github.ErrEventNotFound {
				// ok event wasn;t one of the ones asked to be parsed
			}
		}
		switch payload.(type) {

		case github.PushPayload:
			release := payload.(github.PushPayload)
			// Do whatever you want from here...
			fmt.Printf("%+v", release)

			// case github.PullRequestPayload:
			// 	pullRequest := payload.(github.PullRequestPayload)
			// 	// Do whatever you want from here...
			// 	fmt.Printf("%+v", pullRequest)
		}

		return c.String(http.StatusOK, "Hello, World!")
	})
	e.Logger.Fatal(e.Start(":3000"))
	// slackIt()
}

// // slackIt is a function that initializes the Slackbot.
// func slackIt() {
// 	botToken := os.Getenv("BOT_OAUTH_ACCESS_TOKEN")
// 	slackClient := slack.CreateSlackClient(botToken)
// 	slack.RespondToEvents(slackClient)
// }
