// DO NOT EDIT THIS FILE. This is a fully complete implementation.
package main

import (
	"fmt"
	"net/http"
	"os"

	"github.com/labstack/echo"
	"github.com/nlopes/slack"
	"gopkg.in/go-playground/webhooks.v5/github"

	_ "github.com/joho/godotenv/autoload"
)

// CreateSlackClient Create a client for the slack API
func CreateSlackClient(apiKey string) *slack.RTM {
	api := slack.New(apiKey)
	rtm := api.NewRTM()
	go rtm.ManageConnection() // goroutine!
	return rtm
}

// NotifySlackChannel sends a message to a Slack Channel using the Slack API
func NotifySlackChannel(slackClient *slack.RTM, message string) {
	slackMsg := slack.MsgOptionText(message, false)  // Not sure why the false.
	slackClient.PostMessage("portal-devs", slackMsg) // Channel name, message
}

// main is our entrypoint, where the application initializes the Slackbot.
func main() {
	// hook, _ := github.New(github.Options.Secret("Wassup"))// Secret for Webhook.
	hook, _ := github.New(github.Options.Secret(string(os.Getenv("WEBHOOK"))))

	e := echo.New()
	e.POST("/test", func(c echo.Context) error {
		payload, err := hook.Parse(c.Request(), github.PushEvent)
		if err != nil {
			if err == github.ErrEventNotFound {
				// ok event wasn;t one of the ones asked to be parsed
			}
		}
		switch payload.(type) {

		case github.PushPayload:
			release := payload.(github.PushPayload)
			// Do whatever you want from here...
			// fmt.Printf("%+v", release)
			// fmt.Printf("EMAIL: %+v", release.Pusher.Email)
			newMessage := string(release.Pusher.Name) + " just made a commit to the " + string(release.Repository.FullName) + "repo.\nLook at the changes: " + string(release.Repository.HTMLURL) + "\n"

			fmt.Printf("%+v just made a commit to the %+v repo.\nLook at the changes: %+v\n", release.Pusher.Name, release.Repository.FullName, release.Repository.HTMLURL)
			slackIt(newMessage)
			// case github.PullRequestPayload: .
			// 	pullRequest := payload.(github.PullRequestPayload)
			// 	// Do whatever you want from here...
			// 	fmt.Printf("%+v", pullRequest)

		}

		return c.String(http.StatusOK, "Hello, World!")
	})
	e.Logger.Fatal(e.Start(":3000"))
}

// slackIt is a function that initializes the Slackbot.
func slackIt(message string) {
	botToken := os.Getenv("BOT_OAUTH_ACCESS_TOKEN")
	slackClient := CreateSlackClient(botToken)
	fmt.Println("SENDING MESSASSAGE TO SLACK CHANNEL:", message)
	NotifySlackChannel(slackClient, message)
}
